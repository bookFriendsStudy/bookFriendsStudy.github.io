---
layout: post
title: 6. 키-값 저장소
date: 2022-12-29 21:00:00 +0900
categories:
- 가상 면접 사례로 배우는 대규모 시스템 기초
author: jjonyo
---

# 6장

## 키-값 저장소

키-값 저장소란 비 관계형 데이터베이스이다. 흔히 NoSQL이라는 표현을 사용한다.

- 키는 유일해야 한다.
- 키에 매핑된 값은 키를 통해서만 접근할 수 있다.
- 키는 일반 텍스트일 수도 있고, 해시 값일 수도 있다.
- 키는 짧을수록 좋다.

대표적으로는 Dynamo, memcached, redis가 있다.

## 키-값 저장소 설계

- 키-값 쌍의 크기는 10kb 이하이다.
- 큰 데이터를 저장할 수 있어야 한다.
- 높은 가용성을 제공해야 한다. 따라서 시스템은 설사 장애가 있더라도 빨리 응답해야 한다.
- 높은 규모 확장성을 제공해야 한다. 따라서 트래픽 양에 따라 자동적으로 서버 증설/삭제가 이루어져야 한다.
- 데이터 일관성 수준은 조정이 가능해야 한다.
- 응답 지연시간이 짧아야 한다.

## 단일 서버 키-값 저장소

한대의 서버만 사용할 경우 매우 쉽다.

가장 직관적인 방법은 키-값 쌍 모두를 메모리에 해시 테이블로 저장하는 것이다.

그러나, 모든 데이터를 메모리 안에 두는 것은 현실적으로 불가능할 수 있다.

이를 위한 개선책은 다음과 같다.

- 데이터 압축
- 자주 쓰이는 데이터만 메모리에두고, 나머지는 디스크에 저장

그러나 이렇게 한다 해도, 한대의 서버만으로는 부족한 때가 찾아온다.

(자원의 한계, 장애, 성능 등등)

## 분산 키-값 저장소

키-값 쌍을 여러 서버에 분산시킨다.

분산 시스템을 설계할 땐 CAP정리를 이해해야 한다.

### CAP정리

- 일관성 (Consistency)
    - 모든 클라이언트는 어떤 노드냐에 관계없이 같은 데이터를 봐야 한다.
- 가용성 (Availability)
    - 일부 노드에 장애가 발생하더라도 응답을 받을 수 있어야 한다.
- 파티션 감내 (Partition tolerance)
    - 두 노드 사이에 통신 장애가 발생하더라도 계속 동작해야 한다.

![Untitled](Untitled.png)

세가지 특성을 모두 만족할 수는 없다. 두가지를 충족하려면 어느 하나는 희생해야 한다.

그러나, 분산 시스템에서는 파티션 문제를 피할 수 없다. (애초에 파티션 문제가 발생해도 동작하도록 설계한 것이 분산시스템이기 때문..)

파티션 감내를 포기하면 노드가 하나라도 미동작했을 때 전체 시스템의 장애가 발생한다.

따라서 파티션 감내는 반드시 만족해야하며, 가용성과 일관성 중에 선택해야 한다.

![Untitled](Untitled%201.png)

### CP만족

데이터 일관성을 선택한다면 서버사이의 데이터 불일치 문제를 피하기 위해 다른 노드의 쓰기 연산을 중단시켜야 한다. 이 경우 가용성이 깨지게 된다.

(은행권 같은 경우 일관성이 중요하다. 따라서, 데이터가 일치하지 않을 경우 가용성을 포기하고 일관성을 유지해야 한다.)

### AP만족

일치하지 않는 데이터를 반환 할 위험이 있더라도 계속 읽기 연산을 허용해야 한다. 

## 데이터파티션

애플리케이션의 규모가 클 경우 전체 데이터를 하나의 서버에 저장하는 것은 불가능하다.

이때 가장 단순한 해결책은 데이터를 작은 파티션들로 분할한 다음 여러 대 서버에 저장하는 것이다.

- 데이터를 여러 서버에 고르게 분산할 수 있는가
- 노드가 추가되거나 삭제될 때 데이터의 이동을 최소화 할 수 있는가

중요하게 따져봐야 할 요소이다.

<aside>
💡 이런 문제를 푸는데 적합한 기술이 5장에서 배운 안정해시다

</aside>

## 데이터 다중화

높은 가용성과 안정성을 보장하기 위해서는 데이터를 N개의 서버에 다중화해야 한다.

![Untitled](Untitled%202.png)

안정해시에서 이를 적용한다면 s1,s2,s3에 저장하는 것을 의미한다.

이때 만약 가상노드를 사용한다면, 같은 물리서버에 중복 저장하지 않도록 해야 한다.

안정성을 담보하기 위해서는 데이터센터 단위로 다중화 하는것도 중요하다.

## 데이터 일관성

데이터가 여러 서버에 나뉘어 저장되었다면 이 데이터들이 적절히 동기화 되어야 한다.

정족수 합의 프로토콜을 통해 일관성을 보장할 수 있다.

- N = 사본 개수
- W = 쓰기 연산에 대한 정족수. 쓰기 연산이 성공한 것으로 간주되려면 적어도 W개의 서버로부터 쓰기 연산이 성공했다는 응답을 받아야 한다.
- R = 읽기 연산에 대한 정족수. 읽기 연산이 성공한 것으로 간주되려면 적어도 R개의 서버로부터 응답을 받아야 한다.

![Untitled](Untitled%203.png)

N이 3이라면 3개의 서버에 데이터 사본을 저장한다.

이때, W=1 이라면 쓰기 연산이 성공했다고 최소 1개의 서버로부터 ACK를 받아야 한다.

상황에 따라 W나 R값을 잘 정의해야 한다.

- R = 1, W = N : 빠른 읽기 연산에 최적화된 시스템 (쓰기 응답은 복제본 수 만큼 받기)
- W = 1, R = N : 빠른 쓰기 연산에 최적화된 시스템 (읽기 응답은 복제본 수 만큼 받기)
- W + R > N : 강한 일관성이 보장됨(보통 N=3, W=R=2) (읽기 응답과 쓰기 응답은 복제본 수 보다 크도록 설정)
- W + R <= N : 강한 일관성이 보장되지 않음 (읽기 응답과 쓰기 응답은 복제본 수 보다 작도록 설정)

### 일관성 모델

- 강한 일관성(strong consistency) : 모든 읽기 연산은 가장 최근에 갱신된 결과를 반환한다. 다시 말해서 클라이언트는 절대로 낡은 데이터를 보지 못한다.
- 약한 일관성(weak consistency) : 읽기 연산은 가장 최근에 갱신된 결과를 반환하지 못할 수 있다.
- 최종 일관성(eventual consistency) : 약한 일관성의 한 형태로, 갱신 결과가 결국에는 모든 사본에 반영(즉 ,동기화)되는 모델이다.

일관성이 높을수록 가용성은 떨어지게 된다. 

최종 일관성의 경우 쓰기 연산이 병렬적으로 발생한다면 일관성이 깨질 수 있다.

따라서 이 문제를 해결하기 위해서는 클라이언트에서 일관성이 깨진 데이터를 읽지 않도록 해야 한다.

### 비 일관성 해소 기법

**데이터 버저닝**

데이터 일관성 문제를 해결하기 위해 등장한 기술이다.

데이터를 변경할 때 마다 해당 데이터의 새로운 버전을 만든다.

![Untitled](Untitled%204.png)

![Untitled](Untitled%205.png)

동시에 값을 변경하게 될 경우 값이 충돌하게 된다.

어느 값을 동기화 할것인지 충돌을 해결해야 한다.

이때 벡터시계라는 기술을 통해 문제를 해결한다.

벡터시계는 `[서버, 버전]` 의 순서쌍을 데이터에 매단 것이다.

`D([S1, v1], [S2, v2], …, [Sn, vn])` 로 표현한다고 하자.

데이터 D를 저장하는 과정은 다음과 같다.

- [Si, vi]가 있는지 확인하고 있으면 vi를 증가시킨다.
- 없으면 [Si, 1]을 새로 만든다.

![스크린샷 2022-12-29 오후 6.55.46.png](%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA_2022-12-29_%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE_6.55.46.png)

버전 X가 Y의 이전 버전인지 확인하여 충돌을 확인할 수 있다. (이전버전이 맞다면 충돌 X)

 **`버전 Y에 포함된 모든 구성요소의 값이 X에 포함된 모든 구성요소 값보다 같거나 큰지만 보면 된다.`**

즉, 정상적으로 업데이트 된 데이터라면 이전 버전의 버저닝보다 큰 값이여야 한다.

`D([s0, 1], [s1, 1])은 D([s0, 1], [s1, 2])` 의 이전 버전이다.

그러나 `D([s0, 1], [s1, 2])와 D([s0, 2], [s1, 1]` 는 충돌이다.

Y의 벡터 시계 구송요소 가운데 X의 벡터 시계 동일 서버 구성요소보다 작은 값을 갖는것이 있는지 확인하면 된다.

충돌을 확인했을 경우 클라이언트에서 적절히 충돌을 해결하고 기록해야 한다.

이 방법에는 두가지 단점이 있다.

- 클라이언트에 충돌 감지 및 해소 로직이 들어가야 한다.
- 버전 개수가 굉장히 빨리 늘어나게 된다. 따라서, 임계치를 설정하고 일부 버전을 제거해야 하는데 이럴 경우 충돌 해소 과정의 효율성이 낮아진다.

## 장애 감지

분산시스템에서 노드 간 장애를 감지할 수 있어야 한다.

이때는 보통 두 대 이상의 서버가 장애를 보고해야 실제 장애가 발생했다고 간주한다.

![Untitled](Untitled%206.png)

- 각 노드는 멤버십 목록을 유지한다. 멤버십 목록은 각 멤버 ID와 그 박동 카운터 쌍의 목록이다.
- 각 노드는 주기적으로 자신의 박동 카운터를 증가시킨다.
- 각 노드는 무작위로 선정된 노드들에게 주기적으로 자기 박동 카운터 목록을 보낸다.
- 박동 카운터 목록을 받은 노드는 멤버십 목록을 최신 값으로 갱신한다.
- 어떤 멤버의 박동 카운터 값이 지정된 시간 동안 갱신되지 않으면 해당 멤버는 장애 상태인 것으로 간주한다.

## 장애 처리

### 일시적 장애 처리

- **엄격한 정족수(strict quorum) 접근법**을 쓴다면, 앞서 데이터 일관성에서 설명한 대로, 읽기와 쓰기 연산을 금지해야 한다.
- **느슨한 정족수(sloppy quorum) 접근법**은 이 조건을 완화하여 가용성을 높인다.

![Untitled](Untitled%207.png)

느슨한 정족수 방법의 경우, 가용성을 위하여 새로운 서버를 해시링에서 고른다.

이후 장애 상태인 서버로 가는 요청은 다른 서버가 잠시 맡아 처리하며 발생한 변경사항은 서버가 복구되었을 때 원래 서버로 반영하여 일관성을 보존한다.

### 영구 장애 처리

사본들을 동기화 해야 한다. 이때 사본들을 최신 버전으로 갱신하는 과정에서 사본간의 일관성이 망가진 상태를 탐지하고 전송 데이터 양을 줄이기 위해서 머클트리를 사용한다.

머클트리는 해시트리라고도 불리는데 각 노드마다 자식 노드들에 보관된 값의 해시를 이용하여 트리구조를 만드는 것이다.

ex) 키가 1부터 12일때

![Untitled](Untitled%208.png)

해시값 계산하기

![Untitled](Untitled%209.png)

버킷별로 해시값 계산후 해당 값을 레이블로 갖는 노드 만들기

![Untitled](Untitled%2010.png)

자식노드의 레이블로 부터 새로운 해시값을 계산하여 트리 만들기

![Untitled](Untitled%2011.png)

이후 루트노드부터 값을 비교하면 된다.

루트노드가 같으면 두 데이터는 일관성이 보장된다.