---
layout: post
title: 5. 안정 해시 설계
date: 2022-12-26 21:00:00 +0900
categories:
- 가상 면접 사례로 배우는 대규모 시스템 기초
author: hojunee
---
# 05. 안정 해시 설계

## Goal

- **해시 함수**를 **안정적**으로 설계한다.
- cf) 해시 함수?
    - 임의의 길이를 갖는 임의의 데이터를 고정된 길이의 데이터로 매핑하는 단방향 함수
    - 좋은 해시함수는?
        - 쉽게 기억하고 연산할 수 있어야함
        - 해시함수 $h$는 “임의의”(random) 함수로서 작동해야함

## Background

- 수평적 규모 확장성을 달성하기 위해서는 Request/Data를 서버에 **균등**하게 나누는 것이 중요하다.
- 이를 위해서는 통상적으로 ***Modular Hash Function***을 사용한다.

> $h(x) = x \ mod \ m$

이 방법은 데이터의 분포가 균등하고 서버의 개수에 변화가 없다면 꽤나 유용한 방법이다.

**하지만, 서버가 추가/삭제 되는 상황에서는 문제가 발생한다!**

책의 예시를 들면, 1번 서버에서 장애가 발생했다고 가정하면,

→ 서버의 개수는 4에서 3으로 감소한다. (m이 4에서 3으로 변경된다.)

→ 이에 따라 $mod$ 연산의 결과가 달라지게 된다.

이에 따라서 **캐시 미스(cache miss)**가 발생할 수 있는 문제점이 발생한다.

- 이를 해결하는 naive한 approach는 서버가 3개로 바뀌었으므로, Server Index에 맞게 key를 재 할당하는 것인데, $mod \ 4$와 $mod \ 3$의 결과가 같은 경우는 그리 많지 않으므로, 거의 모든 key를 재할당해야하는 문제가 생긴다.
    
    →만약 이러한 서버의 개수의 변화가 잦을 수평적인 구조라면? 🙀
    

오늘 다루게 될 주제인 **안정 해시(consistent hashing)** 설계는 이 문제를 해결하는 것을 목표로 한다. 

---

## 안정 해시(Consistent Hashing)

책에서는 SHA-1를 예시로 들었지만, 여기서는 SHA-256를 예시로 들어봅시다:

*SHA-256: Output이 $2^{256}$ 비트인 해시 함수

- `x0`: $0$
- `xn`: $2^{256} - 1$

이러한 선형 구조를 구부려 해시 링을 만든다. 그리고 난 후, 서버의 IP나 이름 등을 이 위에 대응시킨다.

이렇게 만들게 되면 다음과 같은 상황에서 장점을 지니게 된다:

### 서버 조회하기

어떤 키가 저장되는 서버는 해당 키의 위치로부터 **시계 방향**으로 링을 탐색해나가면서 만나는 **첫 번째 서버**

*시계 방향이나 반시계 방향은 엔지니어가 정하기 나름인 것으로 보임

### 서버 추가하기

만약 서버가 추가된다면, 동일한 형태로 키 가운데 일부만 재배치된다.

### 서버 삭제하기

서버가 제거되는 경우 키 가운데 일부만 재배치된다.

## 가상 노드(virtual node, vNode)

실제 노드(혹은 서버)를 가리키는 노드

- 가상 노드의 개수가 높음 → 키의 분포는 균일해짐 / 가상 노드를 저장할 공간은 많이 필요… (Tradeoff)

## Conclusion

다음 이유에서 안정 해시는 우위를 가진다:

- 서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.
- 그러면서도 데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.
    - 특정한 shard에 접근이 잦은 문제인 hotspot key문제를 해결하는 데에 도움이 된다.

- cf) Jump Consistent Hash Algorithm
    
    Source: 
    
    [https://arxiv.org/ftp/arxiv/papers/1406/1406.2294.pdf](https://arxiv.org/ftp/arxiv/papers/1406/1406.2294.pdf)
    
    ```cpp
    int32_t JumpConsistentHash(uint64_t key, int32_t num_buckets) {
    	int64_t b = ­1, j = 0;
    		while (j < num_buckets) {
    			b = j;
    			key = key * 2862933555777941757ULL + 1;
    			j = (b + 1) * (double(1LL << 31) / double((key >> 33) + 1));
    		}
    	return b;
    }
    ```
    
- Questions?
    
    So, What is the difference between sharding and consistence hashing?
    
    - **Sharding** is the ***act*** of taking a data set and splitting it across multiple machines
    - **Consistent hashing** is an ***algorithm*** for assigning a set of keys to machines