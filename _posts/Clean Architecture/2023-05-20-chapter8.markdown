---
layout: post
title: 8. Open-Closed Principle
date: 2023-05-20 21:00:00 +0900
categories: 
- Clean Architecture
author: hojunee
---
# Ch 8. Open-Closed Principle

- 소프트웨어의 개체는 확장에 열려있어야 하고, 변경에는 닫혀있어야 한다
    - 행위는 확장 가능, 하지만 개체를 변경해선 안됨.
- Myth → OCP가 클래스/모듈을 설계할 때 도움되는 원칙?
    - 아키텍쳐 컴포넌트 수준에서 OCP를 고려할 때 훨씬 중요한 의미를 가짐!

### Case Study

재무제표를 **웹 페이지**로 보여주는 시스템

- 스크롤할 수 있음
- 음수는 빨간색으로 출력

동일한 정보를 보고서 형태로 변환해서 **흑백 프린터**로 출력해달라고 요청

**How?** 

- 서로 다른 목적으로 변경되는 요소를 적절하게 분리(*단일 책임 원칙, SRP*)
- 이들 요소 사이의 의존성을 체계화(*의존성 역전 원칙, DIP*)

함으로써 변경량 최소화 가능!

Insight! 💡

- 보고서 생성이 2개의 책임으로 분리
    - 보고서용 데이터를 **계산**하는 책임
    - 데이터를 웹 or 프린트하기에 적합한 형태로 **표현**하는 책임
- 두 책임 중 하나에서 변경이 발생하더라도 다른 하나는 변경되지 않도록 의존성을 확실히 조직화해야함

**How?**

- 처리 과정을 클래스 단위로 분할하고, 이들 클래스를 컴포넌트 단위로 구분!
- **소스 코드 의존성**을 확인할 수 있다
- FinancialDataMapper → FinancialDataGateway [구현]
    - FinancialDataMapper는 FinancialDataGateway를 알고있음
    - FinancialDataGateway는 FinancialDataMapper에 대해 알지 못함

- 위 그림을 간단하게 표현하면 다음과 같다
- 모든 컴포넌트 단계는 **단방향**으로 이루어진다.
    - 변경으로부터 보호하려는 컴포넌트를 향하도록 그려짐
    - e.g.
    Presenter에서 발생한 변경으로부터 Controller를 보호하고자 함
    - e.g.2
    View에서 발생한 변경으로부터 Presenter를 보호하고자 함
    - e.g.3
    Interactor는 업무 규칙을 포함하기 때문에, 가장 고수준에 위치함
- 기능이 어떻게, 왜, 언제 발생하는지에 따라서 기능을 분리
- 분리한 기능을 컴포넌트의 계층구조로 조직화
    
    → 저수준 컴포넌트에서 발생한 변경으로부터 고수준 컴포넌트를 보호할 수 있다
    

---

### 방향성 제어

- <I> FinancialDataGateway는 FinancialReportGenerator와 FinancialDataMapper 사이에 위치
    - 의존성 역전!

---

### 정보 은닉

- <I> FinancialReportRequester는 FinancialReportController가 Interactor 내부에 너무 많이 알지 못하도록 막기 위해서 존재
- 이것이 존재하지 않는다면 Controller는 FinancialEntites에 대해서 **추이 종속성**을 가지게 됨
    - 추이 종속성?
        - 자신이 직접 사용하지 않는 요소에는 절대로 의존해서는 안된다라는 SW원칙을 위반

---

### Conclusion

- OCP는 아키텍쳐 수준에서 굉장히 좋은 접근!
- 시스템을 확장하기 쉬운 동시에 변경으로 인해 시스템에 너무 많은 영향을 받지 않도록 함