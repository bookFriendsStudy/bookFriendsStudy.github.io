---
layout: post
title: 14-1. Leftover Patterns I
date: 2023-04-22 21:00:00 +0900
categories: 
- Headfirst Design Pattern
author: hojunee
---
## Bridge Pattern **브릿지 패턴**

### Problem?

- **모든** TV에 대응하는 리모콘을 만들려면?
- 추상화되는 대상이 **하나가 아님** (리모콘? TV?)
- 두가지 독립적인 차원에서 리모콘을 구현하는 것은 어렵다

### Resolve!

- 리모콘과 TV를 구분해서 추상화를 진행
- 각 추상화된 클래스를 구성관계로 잇기 → **Bridge!**
- 단순 추상 클래스 구조보다 디자인이 복잡해짐

---

## Builder Pattern **빌더 패턴**

### Problem?

- Vacation 을 구성하는 프로그램을 만들고자 한다. 그런데 다양한 바리에이션이 존재할 수 있다면? (e.g. # of days, contents, …)
- **유연한 디자인**의 필요성!

### Resolve!

- 객체의 생성을 일련의 단계로 구성
- 여러 단계, 그리고 다양한 절차를 거쳐서 객체를 생성할 수 있음
- 클라이언트 종속성이 더 커짐

---

## Chain of Responsibility Pattern **책임 연쇄 패턴**

### Problem?

- 특정 요청을 처리하는 과정에서 많은 절차적 일들이 필요함. 이를 어떻게 디자인할 수 있을까?

### Resolve!

- `Handler` 라는 독립된 실행 객체의 사슬 형태로 프로그램을 구성하자
- 요청을 처리하는 핸들러는 없거나 오직 하나뿐 → 요청이 반드시 수행된다는 보장이 없다
- 실행 시의 과정을 추적하기 어려움 (디버깅하기 어렵다…)

---

## Flyweight Pattern **플라이웨이트 패턴**

### Problem?

- Tree 객체가 Garden에 존재할 수 있음
- Tree 객체가 많아진다면 Application이 느려진다
- 관찰 → (x, y, age) 의 데이터가 반복되어 데이터가 저장된다

### Resolve!

- 객체의 유사한 상태들을 한데 묶어 저장하고, Tree는 단지 이에 종속되도록 하도록 설정
→ 객체 인스턴스 개수를 줄인다.
- 특정 인스턴스에만 행동을 부여할 수 없음

---

## Interpreter Pattern **인터프리터 패턴**

### Problem & Resolve

- 언어의 문법에 대한 expression과 이에 대한 interpreter를 어떻게 만들 수 있을까?
- 문법을 클래스화에서 쉽게 언어를 구현할 수 있다
    - 새로운 기능, 확장 OK!
- “단순한” Object-Oriented Compiler 구현에 사용
- 문법 개수가 많아지면 복잡해진다. 그럴땐 Compiler Generator를 쓰자

---